#!/usr/bin/env python3

import logging
import socket

import RPi.GPIO as GPIO


# === MAIN SCRIPT ===

# define pins

pin_ribbon_3 = 14
pin_ribbon_4 = 15
pin_ribbon_5 = 18
pin_ribbon_6 = 17
pin_ribbon_7 = 4
pin_ribbon_8 = 3
pin_ribbon_9 = 2

pin_ids = (pin_ribbon_3,pin_ribbon_4,pin_ribbon_5,pin_ribbon_6,pin_ribbon_7,pin_ribbon_8,pin_ribbon_9)

# setup pins

GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(pin_ribbon_3, GPIO.OUT)
GPIO.setup(pin_ribbon_4, GPIO.OUT)
GPIO.setup(pin_ribbon_5, GPIO.OUT)
GPIO.setup(pin_ribbon_6, GPIO.OUT)
GPIO.setup(pin_ribbon_7, GPIO.OUT)
GPIO.setup(pin_ribbon_8, GPIO.OUT)
GPIO.setup(pin_ribbon_9, GPIO.OUT)


logging.basicConfig(filename="digital.log",level=logging.INFO,mode='w')

# Set up networking connection with robot
kuka_socket = socket.socket()
host = "192.168.0.114"
port = 52323
kuka_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
kuka_socket.bind((host,port))
kuka_socket.listen(5)
logging.info(host)

while(True):
    c, addr = kuka_socket.accept()
    value = c.recv(1)[0]
    logging.info(value)
    mode = value & 128 == 128
    logging.info(mode)
    logging.info(bin(value))
    # Set all outputs
    if (mode):
        GPIO.output(pin_ribbon_3,value & 64 == 64)
        GPIO.output(pin_ribbon_4,value & 32 == 32)
        GPIO.output(pin_ribbon_5,value & 16 == 16)
        GPIO.output(pin_ribbon_6,value & 8 == 8)
        GPIO.output(pin_ribbon_7,value & 4 == 4)
        GPIO.output(pin_ribbon_8,value & 2 == 2)
        GPIO.output(pin_ribbon_9,value & 1 == 1)
    # Set individual outputs
    else:
        pin_id = value % 8
        if (pin_id == 7):
            continue
        pin_value = value & 64 == 64
        GPIO.output(pin_ids[pin_id],pin_value)

