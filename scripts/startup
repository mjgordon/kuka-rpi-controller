#!/usr/bin/env python3

import logging
import RPi.GPIO as GPIO
import subprocess
import time

# define pins

pin_rotary_a = 16
pin_rotary_b = 20
pin_rotary_button = 21

pin_reset_button = 8

pin_led_r = 12
pin_led_g = 7
pin_led_b = 1

pin_segment_ser = 25
pin_segment_rclk = 24
pin_segment_srclk = 23

# setup logging
logging.basicConfig(filename='debug.log',level=logging.DEBUG)
logging.info('=======')
logging.info('startup')
logging.info('=======')

# setup pins

GPIO.setmode(GPIO.BCM)
GPIO.setup(pin_rotary_a, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(pin_rotary_b, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(pin_rotary_button, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.setup(pin_reset_button, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.setup(pin_led_r,GPIO.OUT)
GPIO.setup(pin_led_g,GPIO.OUT)
GPIO.setup(pin_led_b,GPIO.OUT)

GPIO.setup(pin_segment_ser,GPIO.OUT)
GPIO.setup(pin_segment_rclk,GPIO.OUT)
GPIO.setup(pin_segment_srclk,GPIO.OUT)

# setup interrupts to turn off pi when with button press, negates the need for gpio-watch

press_time = time.time()

def reset_pressed():
    press_time = time.time()
    time.sleep(5.1)
    GPIO.output(pin_led_r,GPIO.HIGH)
    GPIO.output(pin_led_g,GPIO.LOW)
    GPIO.output(pin_led_b,GPIO.LOW)

def reset_released():
    current_time = time.time()
    if (current_time - pressed_time < 5):
        os.system('sudo shutdown -r now')
    else:
        os.system('sudo shutdown now')

GPIO.add_event_detect(pin_reset_button,GPIO.RISING, callback=reset_released)
GPIO.add_event_detect(pin_reset_button,GPIO.FALLING,callback=reset_pressed)

# led is yellow while program is being chosen

GPIO.output(pin_led_r,GPIO.HIGH)
GPIO.output(pin_led_g,GPIO.HIGH)
GPIO.output(pin_led_b,GPIO.LOW)


# load tool names from file

f = open('../tools.txt','r')
tool_names = f.readlines()
for i in range(0,len(tool_names)):
    tool_names[i] = tool_names[i].rstrip() # remove newlines
f.close()

    
# load default tool number from file

f = open('default-tool','r')
rotary_id = int(f.readlines()[0])
f.close()


# tool is set using rotary encoder

tool_id = -1
rotary_last_a = GPIO.input(pin_rotary_a)
rotary_last_b = GPIO.input(pin_rotary_b)

while (tool_id == -1):
    rotary_a = GPIO.input(pin_rotary_a)
    rotary_b = GPIO.input(pin_rotary_b)
    if ((rotary_last_a == GPIO.LOW) and (rotaryA == GPIO.HIGH)):
        if (rotary_b == GPIO.LOW):
            rotary_id -= 1
            if (rotary_id < 0):
                rotary_id = 9
        else:
            rotary_id += 1
            if (rotary_id > 9):
                rotary_id = 0
        logging.debug('Rotary position: ' + str(rotary_id))
    if (GPIO.input(pin_rotary_button) == GPIO.LOW):
        if (rotary_id < len(tool_names)):
            tool_id = rotary_id
            logging.debug('Rotary button pressed')

            
# save tool selected as default to file

f = open('default-tool','w')
f.write(str(tool_id))
f.close()


# led is green during normal program operation

GPIO.output(pin_led_r, GPIO.LOW)
GPIO.output(pin_led_g, GPIO.HIGH)
GPIO.output(pin_led_b, GPIO.LOW)


# run code for chosen tolo

subprocess.call(['../tool-files/' + tool_names[tool_id] + '/start'])
