#!/usr/bin/env python3

import logging
import RPi.GPIO as GPIO
import subprocess
import time

# define pins

pin_rotary_a = 16
pin_rotary_b = 20
pin_rotary_button = 21

pin_reset_button = 8

pin_led_r = 12
pin_led_g = 1
pin_led_b = 7

pin_segment_ser = 25
pin_segment_rclk = 24
pin_segment_srclk = 23

# setup logging
logging.basicConfig(filename='scripts/debug.log',level=logging.DEBUG)
logging.info('=======')
logging.info('startup')
logging.info('=======')

# setup pins

GPIO.setmode(GPIO.BCM)
GPIO.setup(pin_rotary_a, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(pin_rotary_b, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(pin_rotary_button, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.setup(pin_reset_button, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.setup(pin_led_r,GPIO.OUT)
GPIO.setup(pin_led_g,GPIO.OUT)
GPIO.setup(pin_led_b,GPIO.OUT)

GPIO.setup(pin_segment_ser,GPIO.OUT)
GPIO.setup(pin_segment_rclk,GPIO.OUT)
GPIO.setup(pin_segment_srclk,GPIO.OUT)

# setup interrupts to turn off pi when with button press, negates the need for gpio-watch

press_time = time.time()

def reset_changed():
    button_value = GPIO.input(pin_reset_button)
    if (button_value == GPIO.LOW):
        press_time = time.time()
        time.sleep(5.1)
        GPIO.output(pin_led_r,GPIO.LOW)
        GPIO.output(pin_led_g,GPIO.HIGH)
        GPIO.output(pin_led_b,GPIO.HIGH)
    else:
        current_time = time.time()
        if (current_time - pressed_time < 5):
            logging.info("rebooting now")
            os.system('sudo shutdown -r now')
        else:
            logging.info("shutting down now")
            os.system('sudo shutdown now')

GPIO.add_event_detect(pin_reset_button,GPIO.BOTH, callback=reset_changed)

# led is yellow while program is being chosen

GPIO.output(pin_led_r,GPIO.LOW)
GPIO.output(pin_led_g,GPIO.LOW)
GPIO.output(pin_led_b,GPIO.HIGH)


# load tool names from file

f = open('tools.txt','r')
tool_names = f.readlines()
for i in range(0,len(tool_names)):
    tool_names[i] = tool_names[i].rstrip() # remove newlines
f.close()

    
# load default tool number from file

f = open('scripts/default-tool.txt','r')
rotary_id = int(f.readlines()[0])
f.close()
logging.info('default tool is ' + str(rotary_id))


# define 7 segment control function

def shift_out(data_pin,clock_pin,output_pin,number):
    #               0          1          2          3          4
    #               5          6          7          8          9
    number_codes = (0b01110111,0b01000001,0b00111011,0b01101011,0b01001101,
                    0b01101110,0b01111110,0b01000011,0b01111111,0b01001111)

    data = number_codes[number]
    
    GPIO.output(output_pin,GPIO.LOW)
    for num in range(0,8):
        output = False
        output = data & 0b00000001
        data = data >> 1
        GPIO.output(data_pin,output)
        GPIO.output(clock_pin,GPIO.HIGH)
        #time.sleep(0.001)
        GPIO.output(clock_pin,GPIO.LOW);
        #time.sleep(0.001)
    GPIO.output(output_pin,GPIO.HIGH)

shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, rotary_id)


# tool is set using rotary encoder

tool_id = -1
rotary_last_a = GPIO.input(pin_rotary_a)
rotary_last_b = GPIO.input(pin_rotary_b)
rotary_last_time = 0

logging.info('entering select loop')
while (tool_id == -1):
    rotary_a = GPIO.input(pin_rotary_a)
    rotary_b = GPIO.input(pin_rotary_b)
    if ((rotary_last_a == GPIO.LOW) and (rotary_a == GPIO.HIGH) and (time.time() - rotary_last_time > .1 )):
        if (rotary_b == GPIO.HIGH):
            rotary_id -= 1
            rotary_last_time = time.time()
            if (rotary_id < 0):
                rotary_id = 9
        else:
            rotary_id += 1
            rotary_last_time = time.time()
            if (rotary_id > 9):
                rotary_id = 0
        shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, rotary_id)
    if (GPIO.input(pin_rotary_button) == GPIO.LOW):
        if (rotary_id < len(tool_names)):
            tool_id = rotary_id
    rotary_last_a = rotary_a
    rotary_last_b = rotary_b

            
# save tool selected as default to file

f = open('scripts/default-tool.txt','w')
f.write(str(tool_id))
f.close()
logging.info('selected tool was ' + str(tool_id))


# led is green during normal program operation

GPIO.output(pin_led_r, GPIO.HIGH)
GPIO.output(pin_led_g, GPIO.LOW)
GPIO.output(pin_led_b, GPIO.HIGH)


# setup interrupt to toggle lights once program starts

lights_on = True

def rotary_button_pressed():
    lights_on = not lights_on
    if (lights_on):
        GPIO.output(pin_led_r, GPIO.HIGH)
        GPIO.output(pin_led_g, GPIO.LOW)
        GPIO.output(pin_led_b, GPIO.HIGH)
        shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, rotary_id)
    else:
        GPIO.output(pin_led_r, GPIO.HIGH)
        GPIO.output(pin_led_g, GPIO.HIGH)
        GPIO.output(pin_led_b, GPIO.HIGH)
        shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, 0b00000000)

GPIO.add_event_detect(pin_rotary_button,GPIO.PRESSED, callback=rotary_button_pressed)
        
# run code for chosen tool

subprocess.call(['tool-files/' + tool_names[tool_id] + '/start'])




