#!/usr/bin/env python3

import logging
import RPi.GPIO as GPIO
import os
import subprocess
import time

# === DEFINITIONS ===

# Constant Definitions

pin_rotary_a = 16
pin_rotary_b = 20
pin_rotary_button = 21

pin_reset_button = 8

pin_led_r = 12
pin_led_g = 1
pin_led_b = 7

pin_segment_ser = 25
pin_segment_rclk = 24
pin_segment_srclk = 23


# Function Definitions

def reset_changed(channel):
    """ Called by interrupt when the reset button changes. Resets or shuts down the pi based on timed held. """
    global reset_change_time
    global press_state

    button_value = GPIO.input(pin_reset_button)
    current_time = time.time()
    if (button_value == press_state):
        return

    if (current_time - reset_change_time < 0.05):
        return

    #logging.info(str(press_state) + " " + str(button_value))        
    press_state = button_value



    if (button_value == GPIO.LOW):
        pass
    elif (button_value == GPIO.HIGH):
        led_color(GPIO.LOW,GPIO.HIGH,GPIO.HIGH)
        if (current_time - reset_change_time < 3):
            logging.info("REBOOT")
            logging.info("     " + str(reset_change_time))
            logging.info("     " + str(current_time))
            os.system('sudo shutdown -r now')
        else:
            logging.info("SHUTDOWN")
            logging.info("     " + str(reset_change_time))
            logging.info("     " + str(current_time))
            os.system('sudo shutdown now')

    reset_change_time = time.time()


            
def shift_out(data_pin,clock_pin,output_pin,number):
    """ Sets the 7-segment LED to the passed number. """
    #               0          1          2          3          4
    #               5          6          7          8          9          OFF
    number_codes = (0b01110111,0b01000001,0b00111011,0b01101011,0b01001101,
                    0b01101110,0b01111110,0b01000011,0b01111111,0b01001111,0b00000000)

    data = number_codes[number]
    
    GPIO.output(output_pin,GPIO.LOW)
    for num in range(0,8):
        output = False
        output = data & 0b00000001
        data = data >> 1
        GPIO.output(data_pin,output)
        GPIO.output(clock_pin,GPIO.HIGH)
        #time.sleep(0.001)
        GPIO.output(clock_pin,GPIO.LOW);
        #time.sleep(0.001)
    GPIO.output(output_pin,GPIO.HIGH)

def led_color(r,g,b):
    """ Helper function for changing the status LED color. """
    GPIO.output(pin_led_r,r)
    GPIO.output(pin_led_g,g)
    GPIO.output(pin_led_b,b)
    
def rotary_button_pressed(channel):
    """ Called by interrupt when the rotary button state changes. Declared after tool selection, so only toggles lights. """
    global lights_on
    lights_on = not lights_on
    if (lights_on):
        GPIO.output(pin_led_r, GPIO.HIGH)
        GPIO.output(pin_led_g, GPIO.LOW)
        GPIO.output(pin_led_b, GPIO.HIGH)
        shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, rotary_id)
    else:
        GPIO.output(pin_led_r, GPIO.HIGH)
        GPIO.output(pin_led_g, GPIO.HIGH)
        GPIO.output(pin_led_b, GPIO.HIGH)
        shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, 10)
    logging.info("lights set to: " + str(lights_on))

def timestamp():
    return(str(int(time.time())))
    
# === MAIN SCRIPT ===

# check permissions for any tool scripts
# this is done here so users don't have to remember to do it manually

subprocess.call(['scripts/tool-permissions'])

# setup logging
open('logs/startup.log','w').close()
logging.basicConfig(filename='logs/startup.log',level=logging.DEBUG,filemode='w')
logging.info(timestamp() + ' : STARTUP')


# setup pins

GPIO.setmode(GPIO.BCM)
GPIO.setup(pin_rotary_a, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(pin_rotary_b, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(pin_rotary_button, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.setup(pin_reset_button, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.setup(pin_led_r,GPIO.OUT)
GPIO.setup(pin_led_g,GPIO.OUT)
GPIO.setup(pin_led_b,GPIO.OUT)

GPIO.setup(pin_segment_ser,GPIO.OUT)
GPIO.setup(pin_segment_rclk,GPIO.OUT)
GPIO.setup(pin_segment_srclk,GPIO.OUT)


# setup interrupts to turn off pi when with button press, negates the need for gpio-watch

reset_change_time = time.time()
press_state = GPIO.HIGH
GPIO.add_event_detect(pin_reset_button,GPIO.BOTH, callback=reset_changed)

# led is yellow while program is being chosen

led_color(GPIO.LOW,GPIO.LOW,GPIO.HIGH)


# load tool names from file

f = open('tools.txt','r')
tool_names = f.readlines()
for i in range(0,len(tool_names)):
    tool_names[i] = tool_names[i].rstrip() # remove newlines
f.close()

    
# load default tool number from file

f = open('scripts/default-tool.txt','r')
rotary_id = int(f.readlines()[0])
f.close()
logging.info('default tool is ' + str(rotary_id))


# set the 7 segment led to the default tool number

shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, rotary_id)


# tool is set using rotary encoder

tool_id = -1
rotary_last_a = GPIO.input(pin_rotary_a)
rotary_last_b = GPIO.input(pin_rotary_b)
rotary_last_time = 0

logging.info('entering select loop')
while (tool_id == -1):
    rotary_a = GPIO.input(pin_rotary_a)
    rotary_b = GPIO.input(pin_rotary_b)
    if ((rotary_a != rotary_last_a) and (time.time() - rotary_last_time > .05 )):
        if (rotary_b == rotary_a):
            rotary_id -= 1
            rotary_last_time = time.time()
            if (rotary_id < 0):
                rotary_id = 9
        else:
            rotary_id += 1
            rotary_last_time = time.time()
            if (rotary_id > 9):
                rotary_id = 0
        shift_out(pin_segment_ser,pin_segment_srclk,pin_segment_rclk, rotary_id)
    if (GPIO.input(pin_rotary_button) == GPIO.LOW):
        if (rotary_id < len(tool_names)):
            tool_id = rotary_id
    rotary_last_a = rotary_a
    rotary_last_b = rotary_b

            
# save tool selected as default to file

f = open('scripts/default-tool.txt','w')
f.write(str(tool_id))
f.close()
logging.info('selected tool was ' + str(tool_id))


# led is green during normal program operation

led_color(GPIO.HIGH,GPIO.LOW,GPIO.HIGH)


# setup interrupt to toggle lights once program starts

lights_on = True
GPIO.add_event_detect(pin_rotary_button,GPIO.FALLING, callback=rotary_button_pressed,bouncetime=300)


# run code for chosen tool

subprocess.call(['tool-files/' + tool_names[tool_id] + '_start'])

# Final Loop
# This will keep this program active if the tool subprocess crashes or finishes for whatever reason, so the power buttons and light toggle will still be usable
# LED turns purple to indicate this state

led_color(GPIO.LOW,GPIO.HIGH,GPIO.LOW)

while(True):
    pass

